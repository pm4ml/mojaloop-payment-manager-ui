# CircleCI v2.1 Config
version: "2.1"

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  docker: circleci/docker@1.5.0
  slack: circleci/slack@3.4.2


defaults_docker_Dependencies: &defaults_docker_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk --no-cache add -t build-dependencies make gcc g++ python3 libtool autoconf automake jq
    apk --no-cache add bash bash-doc bash-completion
    npm install -g node-gyp

##
# Executors
#
# CircleCI Executors
##
executors:
  # default-docker:
  #   working_directory: &WORKING_DIR /home/circleci/project
  #   shell: "/bin/sh -leo pipefail" # Ref: https://circleci.com/docs/env-vars/#alpine-linux
  #   environment:
  #     BASH_ENV:
  #       /etc/profile ## Ref: https://circleci.com/docs/env-vars/#alpine-linux
  #     NVM_ARCH_UNOFFICIAL_OVERRIDE:
  #       x64-musl ## Ref: https://github.com/nvm-sh/nvm/issues/1102#issuecomment-550572252
  #   docker:
  #     - image: node:lts-alpine # Ref: https://hub.docker.com/_/node?tab=tags&page=1&name=alpine
  default-docker:
    working_directory: /home/circleci/project # /git
    docker:
      - image: cimg/node:16.20

  default-machine:
    machine:
      image: ubuntu-1604:201903-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - run: node --version
      # - run: apk add --update openssh-client git
      - run:
          name: Install general dependencies
          command: *defaults_docker_Dependencies
      # - add_ssh_keys:
      #     fingerprints:
      #       - "ad:c6:bb:2b:79:4e:e7:9a:2f:15:df:f6:15:cb:04:6c"
      - checkout
      - run:
          name: Update NPM install (using `yarn install`)
          command: yarn install
      - save_cache:
          key: dependency-cache-v2-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
  lint:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-v2-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: Run lint
          command: yarn lint
      - run:
          name: Run unit tests
          command: yarn test
#      - slack/status:
#          success_message: Linting passed in branch $CIRCLE_BRANCH
#          failure_message: Linting failed in branch $CIRCLE_BRANCH
#          webhook: $SLACK_WEBHOOK

  test-unit:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-v2-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: Run unit tests
          command: yarn test
#      - slack/status:
#          success_message: Unit tests passed in branch $CIRCLE_BRANCH
#          failure_message: Unit tests failed in branch $CIRCLE_BRANCH
#          webhook: $SLACK_WEBHOOK

#  slack-notify-docker:
#    docker:
#      - image: circleci/node:latest
#    steps:
#      - slack/notify:
#          color: '#42e2f4'
#          message: Docker Image built and published, tag $CIRCLE_BRANCH
#          webhook: $SLACK_WEBHOOK

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  test:
    jobs:
      - setup:
          context: pm4ml-ci
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - lint:
          requires:
            - setup
          context: pm4ml-ci
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - test-unit:
          requires:
            - setup
          context: pm4ml-ci
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
  deploy:
    jobs:
      - docker/publish:
          context: pm4ml-ci
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
          before_build:
            - run:
                name: Set image tag
                command: |
                  if [[ -v CIRCLE_TAG ]]; then
                    echo 'export IMAGE_TAG=$(echo $CIRCLE_TAG | tr -d v)' >> $BASH_ENV
                  else
                    echo 'export IMAGE_TAG=v`grep version package.json | sed 1q | awk -F \" '\''{print $4}'\''`' >> $BASH_ENV
                  fi
          lint-dockerfile: false
          image: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
          tag: $IMAGE_TAG
          registry: $DOCKER_REGISTRY
          docker-username: DOCKER_USER
          docker-password: DOCKER_PASSWORD
#          after_build:
#            - slack/status:
#                success_message: Building Docker Image $CIRCLE_PROJECT_REPONAME:$IMAGE_TAG passed in branch $CIRCLE_BRANCH
#                failure_message: Building Docker Image $CIRCLE_PROJECT_REPONAME:$IMAGE_TAG failed in branch $CIRCLE_BRANCH
#                webhook: $SLACK_WEBHOOK
